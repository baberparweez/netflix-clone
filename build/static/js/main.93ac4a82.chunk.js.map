{"version":3,"sources":["components/Images/Netflix_icon.png","Head.js","components/Nav/Nav.js","axios.js","requests.js","components/Banner/Banner.js","components/Row/Row.js","App.js","reportWebVitals.js","index.js"],"names":["Head","property","content","Image","Nav","useState","show","handleShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceovies","fetchDocumentaries","Banner","str","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93ac4a82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Netflix_icon.8e8e8efb.png\";","import React from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\n\nimport Image from \"./components/Images/Netflix_icon.png\";\n\nfunction Head() {\n    return (\n        <HelmetProvider>\n            <Helmet>\n                <title>Netflix Clone</title>\n                <meta property=\"og:title\" content=\"Netflix\" />\n                <meta property=\"og:image\" content={Image} />\n                <meta\n                    property=\"og:description\"\n                    content=\"A Netflix Interface created using React\"\n                />\n                <meta\n                    property=\"og:url\"\n                    content=\"https://netflix-clone-b8973.web.app\"\n                />\n            </Helmet>\n        </HelmetProvider>\n    );\n}\n\nexport default Head;\n","import React, { useState, useEffect } from \"react\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <div className={`nav ${show ? \"nav__scrolled\" : \"\"}`}>\n            <img\n                className=\"nav__logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n                alt=\"Netflix Logo\"\n            />\n\n            <img\n                className=\"nav__avatar\"\n                src=\"https://i.pinimg.com/564x/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.jpg\"\n                alt=\"Netflix Logo\"\n            />\n        </div>\n    );\n}\n\nexport default Nav;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","const API_KEY = \"386b9106e6bb5860bdc2598f98566009\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../../axios\";\nimport requests from \"../../requests\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"top left\",\n            }}\n        >\n            <div className=\"banner__content\">\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n\n                <div className=\"banner__button\">Play</div>\n                <div className=\"banner__button\">My List</div>\n\n                <h2 className=\"banner__description\">\n                    {truncate(movie.overview, 150)}\n                </h2>\n            </div>\n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../../axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nfunction Row({ title, fetchURL, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    // A snippet of code which runs on a specific condition/variable\n    useEffect(() => {\n        // if [], run once when row loads, and don't run again\n        async function fetchData() {\n            const request = await axios.get(fetchURL);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchURL]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(\n                movie?.title || movie?.name || movie?.original_name || \"\"\n            )\n                .then((url) => {\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch((error) => console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${\n                            isLargeRow && \"row__posterLarge\"\n                        }`}\n                        src={`https://image.tmdb.org/t/p/original/${\n                            isLargeRow\n                                ? movie?.poster_path\n                                : movie?.backdrop_path\n                        }`}\n                        alt={\n                            movie?.title || movie?.name || movie?.original_name\n                        }\n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\n\nexport default Row;\n","import React from \"react\";\n\nimport Head from \"./Head.js\";\nimport Nav from \"./components/Nav/Nav\";\nimport Banner from \"./components/Banner/Banner\";\nimport Row from \"./components/Row/Row\";\nimport requests from \"./requests\";\n\n// Stylesheet to import all style partials\nimport \"./Styles.scss\";\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Head />\n            <Nav />\n            <Banner />\n            <Row\n                title=\"NETFLIX ORIGINALS\"\n                fetchURL={requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row title=\"Trending Now\" fetchURL={requests.fetchTrending} />\n            <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated} />\n            <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies} />\n            <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies} />\n            <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies} />\n            <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceovies} />\n            <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}